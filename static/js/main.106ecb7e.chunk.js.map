{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","upLvl","player","state","first","setState","second","third","fourth","console","log","downLvl","_this2","react_default","a","createElement","className","rowSpan","href","onClick","style","paddingRight","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.106ecb7e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      first: 1,\n      second: 1,\n      third: 1,\n      fourth: 1\n    };\n  }\n\n  upLvl = (player) => {\n    switch(player) {\n      case 1:\n        if(this.state.first < 10)\n          this.setState({ first: ++this.state.first});\n        break;\n      case 2:\n        if(this.state.second < 10)\n          this.setState({ second: ++this.state.second});\n        break;\n      case 3:\n        if(this.state.third < 10)\n          this.setState({ third: ++this.state.third});\n        break;\n      case 4:\n        if(this.state.fourth < 10)\n          this.setState({ fourth: ++this.state.fourth});\n        break;\n      default:\n        console.log(\"default\");\n    }\n  }\n\n  downLvl = (player) => {\n    switch(player) {\n      case 1:\n        if(this.state.first > 1)\n          this.setState({ first: --this.state.first});\n        break;\n      case 2:\n        if(this.state.second > 1)\n          this.setState({ second: --this.state.second});\n        break;\n      case 3:\n        if(this.state.third > 1)\n          this.setState({ third: --this.state.third});\n        break;\n      case 4:\n        if(this.state.fourth > 1)\n          this.setState({ fourth: --this.state.fourth});\n        break;\n      default:\n        console.log(\"default\");\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <table>\n          <tbody>\n            <tr>\n              <td rowSpan=\"2\">First:</td>\n              <td rowSpan=\"2\">{ this.state.first }</td>\n              <td><a href={null} onClick={ () => { this.upLvl(1) } }>▲</a></td>\n            </tr>\n            <tr>\n              <td><a href={null} onClick={ () => { this.downLvl(1) } }>▼</a></td>\n            </tr>\n            <tr>\n              <td rowSpan=\"2\" style={{paddingRight:15}}>Second:</td>\n              <td rowSpan=\"2\">{ this.state.second }</td>\n              <td><a href={null} onClick={ () => { this.upLvl(2) } }>▲</a></td>\n            </tr>\n            <tr>\n              <td><a href={null} onClick={ () => { this.downLvl(2) } }>▼</a></td>\n            </tr>\n            <tr>\n              <td rowSpan=\"2\">Third:</td>\n              <td rowSpan=\"2\">{ this.state.third }</td>\n              <td><a href={null} onClick={ () => { this.upLvl(3) } }>▲</a></td>\n            </tr>\n            <tr>\n              <td><a href={null} onClick={ () => { this.downLvl(3) } }>▼</a></td>\n            </tr>\n            <tr>\n              <td rowSpan=\"2\">Fourth:</td>\n              <td rowSpan=\"2\">{ this.state.fourth }</td>\n              <td><a href={null} onClick={ () => { this.upLvl(4) } }>▲</a></td>\n            </tr>\n            <tr>\n              <td><a href={null} onClick={ () => { this.downLvl(4) } }>▼</a></td>\n            </tr>\n          </tbody>\n        </table>\n        <br />\n        <a href={null} onClick={\n            () => {\n              this.setState({\n                first: 1,\n                second: 1,\n                third: 1,\n                fourth: 1\n              });\n            }\n          }>\n          New game\n        </a>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}